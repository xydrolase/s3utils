#!/usr/bin/env python

from __future__ import print_function

from argparse import ArgumentParser
from copy import copy

import boto
import sys
import os
import time

class DirPolicy:
    def __init__(self, bucket='', root='', prefix='', use_relpath=True, 
            flatten=False, overwrite='overwrite', **kwargs):
        self.bucket = bucket
        self.root = root
        self.prefix = prefix
        self.use_relpath = use_relpath
        self.flatten = flatten
        self.overwrite = overwrite

        self.absroot = os.path.abspath(root)

    def __contains__(self, fname):
        return os.path.abspath(fname).startswith(self.absroot)

    def __lt__(self, rhs):
        return len(self.absroot) > len(rhs.absroot)

    def __cmp__(self, rhs):
        """Sort, in descending order, the depth of path (level of folders)."""
        return -cmp(len(self.absroot), len(rhs.absroot))

    def __repr__(self):
        return "<DirPolicy '{0}'>".format(self.absroot)

    def s3_key(self, fname):
        abspath = os.path.abspath(fname)
        relpath = os.path.relpath(abspath, self.absroot)

        s3_path = relpath if self.use_relpath else fname
        s3_key = os.path.join(self.prefix, s3_path)

        if self.flatten:
            s3_path = os.path.basename(s3_path)

        return {
                'abspath': abspath, 
                'relpath': relpath,
                'bucket': self.bucket,
                'overwrite': self.overwrite,
                'key': s3_key
                }

def parse_args(argv=None):
    parser = ArgumentParser(
            description="Amazon S3 Utilities.")
    parser.add_argument("-c", "--config", default="~/.s3util/config.yaml",
            help="Specify the configuration file.")

    sub_parsers = parser.add_subparsers(
            title="available commands", 
            metavar="{command}")

    sp_put = sub_parsers.add_parser("put", 
            help="Upload a local file to a S3 bucket.")

    sp_put.add_argument("-b", "--bucket", 
            help="Bucket to which the file is uploaded.")
    sp_put.add_argument("-p", "--prefix", default='',
            help="Directory (in the bucket) to which the file is uploaded.")
    sp_put.add_argument("-o", "--overwrite", 
            choices=["overwrite", "suffix", "versioning"],
            default="overwrite",
            help="How to deal with existing file(s).")
    sp_put.add_argument("--flatten", action="store_true", default=False,
            help="Discard the subdirectory structures for local files.")
    sp_put.add_argument("files", nargs="+", metavar="file",
            help="File(s) to be uploaded to S3.")

    sp_put.set_defaults(action=cmd_put)

    sp_config = sub_parsers.add_parser("config",
            help="Configure s3util.")

    if (argv is None and len(sys.argv) == 1) \
            or (type(argv) in (list, tuple) and len(argv) == 0):
        parser.print_help()
        parser.exit()

    args = parser.parse_args(argv)

    return args

def load_config_file(conf_file):
    import yaml

    if conf_file.find('~') != -1:
        conf_file = os.path.expanduser(conf_file)

    if not os.path.exists(conf_file):
        print("fatal: configuration file {0} does not exist.".format(
            conf_file), file=sys.stderr)

        sys.exit(1)

    st_mode = os.stat(conf_file).st_mode
    # check if any of the lower 7 bits are set. if so, warn the user and abort
    if st_mode & 0x7f:
        print(("warning: you should set the mode of {0} to "
            "0600 or 0400 to protect your credentials.").format(conf_file), 
            file=sys.stderr)
        sys.exit(1)

    with open(conf_file) as f:
        try:
            conf = yaml.load(f)
        except yaml.scanner.ScannerError as e:
            err_msg = ("fatal: corrupted configuration file {0}.\n\n"
                    "{1}").format(conf_file, e)

            print(err_msg, file=sys.stderr)
            sys.exit(1)

        conf.setdefault('directories', [])
        return conf

def humanize_size(nbytes):
    unit = 'B'
    multiplier = nbytes

    if nbytes >= 1024 and nbytes < 1024*1024:
        unit = 'KB'
        multiplier = round(float(nbytes) / 1024, 1)
    elif nbytes >= 1024*1024 and nbytes < 1024**3:
        unit = 'MB'
        multiplier = round(float(nbytes) / 1024**2, 1)
    elif nbytes >= 1024**3:
        unit = 'GB'
        multiplier = round(float(nbytes) / 1024**3, 1)

    return "{0}{1}".format(multiplier, unit)

def upload_cb_factory(filename):
    ts_start = time.time()
    def cb(bytes_transmitted, bytes_total):
        perc = int(round(float(bytes_transmitted) / bytes_total * 100))
        progress = int(round(float(bytes_transmitted) / bytes_total * 20))

        bps = float(bytes_transmitted) / (time.time() - ts_start)

        pbar = "{0}{1}".format('=' * progress,
                '>' if progress < 20 else '')

        sys.stdout.write("\r  {0}% [{1}] {2}   {3}/s".format(
            perc, pbar.ljust(20),
            humanize_size(bytes_total), humanize_size(bps)))

        sys.stdout.flush()

    return cb

def generate_s3_key(files, conf):
    if type(files) is str:
        files = [files]

    dir_policies = [DirPolicy(root='/', **conf['default'])]
    for d in conf['directories']:
        if 'root' in d:
            pol = copy(conf['default'])
            pol.update(d)

            dir_policies.append(DirPolicy(**pol))


    for f in files:
        # choose the most pertinent/narrow policy, if multiple policies are
        # associated with the file.
        # the 'default' policy should always apply
        policy = sorted([dirp for dirp in dir_policies if f in dirp])[0]

        yield policy.s3_key(f)

def put_file(conn, abspath=None, key=None, bucket=None, overwrite='overwrite', 
        **options):
    try:
        bkt = conn.get_bucket(bucket)
    except boto.exception.S3ResponseError as e:
        print("fatal: unable to access bucket '{0}'.\n\n{1}".format(
            bucket, e), file=sys.stderr)
        sys.exit(1)

    exists = True
    s3_key = bkt.get_key(key)

    if s3_key is None:
        exists = False
        s3_key = boto.s3.key.Key(bkt)
        s3_key.key = key

    progress_cb = upload_cb_factory(abspath)

    sys.stdout.write(
            "Uploading: '{0}'\nDestination: '{1}/{2}'\n".format(
                abspath, bucket, key))

    if not exists or overwrite == 'overwrite':
        s3_key.set_contents_from_filename(abspath,
                replace=True, cb=progress_cb, num_cb=100)

    sys.stdout.write("\n")
    sys.stdout.flush()

def cmd_put(args):
    conf = load_config_file(args.config)

    # overwrite default settings with arguments specified by the user.
    conf['default'].update(dict(
        (attr, getattr(args, attr))
        for attr in ['overwrite', 'prefix', 'bucket', 'flatten']
        if hasattr(args, attr) and getattr(args, attr)))

    if not 'aws_credentials' in conf:
        raise ValueError(
                "Invalid configuration file: `aws_credentials` missing.")

    if conf['aws_credentials'].get('use_iam_role', False):
        conn = boto.connect_s3()
    else:
        creds = conf['aws_credentials']
        try:
            conn = boto.connect_s3(
                    aws_access_key_id=creds.get('access_key_id', ''),
                    aws_secret_access_key=creds.get(
                        'secret_access_key', ''))
        except boto.exception.NoAuthHandlerFound:
            err_msg = ("fatal: You have not set up your credentials for "
                    " authentication.\n\n"
                    "Please set up the credentials via command: \n"
                    "   s3util config credentials")

            print(err_msg, file=sys.stderr)

            sys.exit(1)

    if not args.bucket:
        def_conf = conf.get('default', {})
        args.bucket = def_conf.get('bucket', None)

        if args.bucket is None:
            print("fatal: bucket id is missing.", file=sys.stderr)
            sys.exit(1)


    for f in generate_s3_key(args.files, conf):
        put_file(conn, **f)

    conn.close()


def main():
    args = parse_args()

    if args.action:
        args.action(args)

if __name__ == "__main__":
    main()
